
###############################################################################################
A - PREPARE ENVIRONMENT
###############################################################################################

Change SELinux to be Permissive on the Basion node
# vi /etc/selinux/config
# getenforce

Stop and disable firewalld on the Bastion node
# systemctl stop firewalld
# systemctl disable firewalld
 
Install required packages
# yum -y install podman git httpd httpd-tools jq net-tools tree yum-utils --nogpgcheck


Prepare OCP directories
$ mkdir -p /ocp4_downloads/{clients,dependencies,ocp4_install}
$ mkdir -p /ocp4_downloads/registry/{auth,certs,data,images}
$ mkdir -p /ibm/installation_directory

# cd /ocp4_downloads/clients
# tar xvzf /ocp4_downloads/clients/openshift-client-linux.tar.gz -C /usr/local/bin

Create environment variable file
# vi /ocp4_downloads/ocp4_install/ocp-env.config
OCP_RELEASE=4.6.40
RELEASE_NAME="ocp-release"
ARCHITECTURE=x86_64
REGISTRY_SERVER=bastion.lab.local
REGISTRY_PORT=5000
LOCAL_REGISTRY="${REGISTRY_SERVER}:${REGISTRY_PORT}"
LOCAL_REPOSITORY='ocp4/openshift4'
LOCAL_SECRET_JSON='/ocp4_downloads/ocp4_install/ocp_pullsecret.json'
REGISTRY_USER='admin'
REGISTRY_PASSWORD='p@ssword'
REGISTRY_DIR='/ocp4_downloads/registry'
PRODUCT_REPO='openshift-release-dev'

###############################################################################################

##############################################################################################


###############################################################################################

A-5. HTTP

# yum install -y httpd
# systemctl enable httpd
# systemctl start httpd

######????? ln -s /ocp4_downloads /var/www/html/ocp4
$ chown -R apache: /var/www/html/
$ chmod -R 755 /var/www/html/


$ vi /etc/httpd/conf/httpd.conf
Listen 81

$ curl -L -s http://${REGISTRY_SERVER}:81/ocp4 --list-only
$
$ firewall-cmd --permanent --add-port=81/tcp
$ firewall-cmd --permanent --add-service=http
$ firewall-cmd --reload

###############################################################################################
B - INSTALLATION
###############################################################################################

B-1. Create LOcal Mirror Registry



# source /ocp4_downloads/ocp4_install/ocp-env.config

******************************************************************
1-1. Generate authentication and certificate for registry

$ cd $REGISTRY_DIR/auth
$ htpasswd -bBc htpasswd admin p@ssword
$
$ cd $REGISTRY_DIR/certs
$ openssl req -newkey rsa:4096 -nodes -sha256 -keyout registry.key -x509 -days 3650 -out registry.crt -subj "/C=VN/ST=/L=/O=/CN=$REGISTRY_SERVER"


$
$## openssl req -x509 -days 3560 -newkey rsa:4096 -nodes -sha256 -keyout registry.key -out registry.crt
$
$ cp registry.crt /etc/pki/ca-trust/source/anchors/
$ update-ca-trust
$ trust list | grep -i "$REGISTRY_SERVER"





******************************************************************
1-2. Create Registry Container

# podman run --name mirror-registry -d -p 5000:5000 \
-v /ocp4_downloads/registry/data:/var/lib/registry:z \
-v /ocp4_downloads/registry/auth:/auth:z \
-v /ocp4_downloads/registry/certs:/certs:z \
-e "REGISTRY_AUTH=htpasswd" \
-e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm" \
-e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \
-e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/registry.crt \
-e REGISTRY_HTTP_TLS_KEY=/certs/registry.key \
docker.io/library/registry:2

# curl -u $REGISTRY_USER:$REGISTRY_PASSWORD https://${LOCAL_REGISTRY}/v2/_catalog


Open the required ports for your registry:

$ firewall-cmd --add-port= 5000/tcp --permanent 
$ firewall-cmd --reload


******************************************************************
1-3. Create base64 encoded credentials
$ cd $REGISTRY_DIR/auth
$ echo -n 'admin:passw0rd' | base64 -w0 > RegUserPass.64
$ cat RegUserPass.64
YWRtaW46cGFzc3cwcmQ=

Create JSON format file from pull-secret.txt
$ cat /ocp4_downloads/ocp4_install/pull-secret.txt | jq . > /ocp4_downloads/ocp4_install/ocp_pullsecret.json

Add local registry information to pullsecret JSON file
$ vi /ocp4_downloads/ocp4_install/ocp_pullsecret.json
{
  "auths": {
    "bastion.lab.local:5000": {
      "auth": "YWRtaW46cGFzc3cwcmQ=",
      "email": "trungtv@vn.ibm.com"
    },


******************************************************************
1-4. Mirror registry to local

$ export GODEBUG=x509ignoreCN=0
$ oc adm release mirror -a ${LOCAL_SECRET_JSON}  \
--from=quay.io/${PRODUCT_REPO}/${RELEASE_NAME}:${OCP_RELEASE}-${ARCHITECTURE} \
--to=${LOCAL_REGISTRY}/${LOCAL_REPOSITORY} \
--to-release-image=${LOCAL_REGISTRY}/${LOCAL_REPOSITORY}:${OCP_RELEASE}

oc adm -a ${LOCAL_SECRET_JSON} release mirror --from=quay.io/${PRODUCT_REPO}/${RELEASE_NAME}:${OCP_RELEASE}-x86_64 --to=${LOCAL_REGISTRY}/${LOCAL_REPOSITORY} --to-release-image=${LOCAL_REGISTRY}/${LOCAL_REPOSITORY}:${OCP_RELEASE}

******************************************************************
1-5. Generate the installation program 4.6.40

$ export GODEBUG=x509ignoreCN=0
$ cd /ocp4_downloads/clients
$
$ oc adm -a ${LOCAL_SECRET_JSON} release extract --command=openshift-install "${LOCAL_REGISTRY}/${LOCAL_REPOSITORY}:${OCP_RELEASE}-${ARCHITECTURE}" --loglevel=10
$
$ cp openshift-install /usr/local/bin/
$ openshift-install -h
$ openshift-install version
openshift-install 4.6.40
built from commit d1596267c9977c3de6770a6d8f3a18e6ff834087
release image bastion.lab.local:5000/ocp4/openshift4@sha256:a8bc2a472611d499d99f347b3e2a7c385107e9c4e44b45d765a99338b566dd12

